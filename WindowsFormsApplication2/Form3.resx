<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>